1)CREATE PACKAGE cust_sal AS 
   PROCEDURE find_sal(c_id customers.id%type); 
END cust_sal; 
/

Package created.

2)CREATE OR REPLACE PACKAGE BODY cust_sal AS  
   
   PROCEDURE find_sal(c_id customers.id%TYPE) IS 
   c_sal customers.salary%TYPE; 
   BEGIN 
      SELECT salary INTO c_sal 
      FROM customers 
      WHERE id = c_id; 
      dbms_output.put_line('Salary: '|| c_sal); 
   END find_sal; 
END cust_sal; 
/

Package Body created.

3)DECLARE 
   code customers.id%type := &cc_id; 
BEGIN 
   cust_sal.find_sal(code); 
END; 
/

Enter value for cc_id: 1 
Salary: 3000 

4)Select * from customers;  

+----+----------+-----+-----------+----------+ 
| ID | NAME     | AGE | ADDRESS   | SALARY   | 
+----+----------+-----+-----------+----------+ 
|  1 | naveen   |  25 | banglore  |  55000   | 
|  2 | varun    |  30 | hyderabad |  20000   | 
|  3 | tanuja   |  22 | chennai   |  25000   | 
|  4 | kavya    |  29 | rajampet  |  30000   | 
|  5 | charan   |  32 | tirupati  |  22000   | 
|  6 | harsha   |  25 | kadapa    |  10000   | 
+----+----------+-----+-----------+----------+

CREATE OR REPLACE PACKAGE c_package AS 
   -- Adds a customer 
   PROCEDURE addCustomer(c_id   customers.id%type, 
   c_name  customerS.No.ame%type, 
   c_age  customers.age%type, 
   c_addr customers.address%type,  
   c_sal  customers.salary%type); 
   
   -- Removes a customer 
   PROCEDURE delCustomer(c_id  customers.id%TYPE); 
   --Lists all customers 
   PROCEDURE listCustomer; 
  
END c_package; 

Package created.

5)CREATE OR REPLACE PACKAGE BODY c_package AS 
   PROCEDURE addCustomer(c_id  customers.id%type, 
      c_name customerS.No.ame%type, 
      c_age  customers.age%type, 
      c_addr  customers.address%type,  
      c_sal   customers.salary%type) 
   IS 
   BEGIN 
      INSERT INTO customers (id,name,age,address,salary) 
         VALUES(c_id, c_name, c_age, c_addr, c_sal); 
   END addCustomer; 
   
   PROCEDURE delCustomer(c_id   customers.id%type) IS 
   BEGIN 
      DELETE FROM customers 
      WHERE id = c_id; 
   END delCustomer;  
   
   PROCEDURE listCustomer IS 
   CURSOR c_customers is 
      SELECT  name FROM customers; 
   TYPE c_list is TABLE OF customers.Name%type; 
   name_list c_list := c_list(); 
   counter integer :=0; 
   BEGIN 
      FOR n IN c_customers LOOP 
      counter := counter +1; 
      name_list.extend; 
      name_list(counter) := n.name; 
      dbms_output.put_line('Customer(' ||counter|| ')'||name_list(counter)); 
      END LOOP; 
   END listCustomer;
   
END c_package; 
/

Package body created.

6)DECLARE 
   code customers.id%type:= 6; 
BEGIN 
   c_package.addcustomer(5, 'charan', 32, 'tirupati', 22000); 
   c_package.addcustomer(6, 'harsha', 25, 'kadapa', 10000); 

END; 
/  

Customer(1): naveen  
Customer(2): varun  
Customer(3): tanuja     
Customer(4): kavya  
Customer(5): charan
Customer(6): harsha
Customer(1): naveen  
Customer(2): varun  
Customer(3): tanuja     
Customer(4): kavya  
Customer(5): charan

 
 7)DECLARE
	sno student.rollno%type;
	s_age student.age%type;
	snm student.sname%type;
BEGIN
	sno := &sno;
	snm := &snm
	pkg_student.updateRecord(sno);
	IF pkg_student.deleteRecord(snm) THEN
		dbms_output.put_line('RECORD DELETED');
	ELSE
		dbms_output.put_line('RECORD NOT FOUND');
	END IF;
END;

Enter value for sno: 1001
Enter value for snm: naveen
RECORD UPDATED
RECORD NOT FOUND
PL/SQL procedure successfully completed.
   c_package.listcustomer; 
   c_package.delcustomer(code); 
   c_package.listcustomer; 
